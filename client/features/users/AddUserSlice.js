import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// ADD User Button
// This is an async thunk action creator that adds a new user
export const addNewUser = createAsyncThunk("newUser", async (user) => {
  try {
    // Send a POST request to the server to add a new user
    const { data } = await axios.post("/api/users", user);
    console.log("addnewUser returned data from server");
    return data; // Return the response data
  } catch (error) {
    console.log(error);
  }
});

// Create the allUsersSlice
const allUsersSlice = createSlice({
  name: "allUsers",
  initialState: {
    userList: [], // Initial state with an empty userList array
  },
  extraReducers: (builder) => {
    // builder.addCase(fetchUserSlice.fulfilled, (state, action) => {
    //   state.userList = action.payload;
    // });

    // ADD User
    // This is the reducer for the addNewUser action
    builder.addCase(addNewUser.fulfilled, (state, action) => {
      console.log("adding new user to redux", action.payload);
      const currentUser = state.userList;
      // Append the newly added user to the userList array
      // this contains the data that was returned from our server
      currentUser.push(action.payload);
      state.userList = [...currentUser];
    });
  },
});

// Export a selector function to retrieve the userList from the Redux store
export const selectAllUsers = (state) => {
  return state.allUsers.userList;
};

export default allUsersSlice.reducer;

// This code represents a Redux slice called allUsersSlice in which we define the actions and reducers related to user management. Let's go through the code step by step:

// Import necessary dependencies: createSlice and createAsyncThunk from @reduxjs/toolkit and axios for making HTTP requests.
// Define the addNewUser action using the createAsyncThunk function. It is an asynchronous action that sends a POST request to the server to add a new user. It takes the user object as a parameter and returns the response data.
// Create the allUsersSlice using the createSlice function. It represents the slice of the Redux store that manages the state of all users.
// Inside allUsersSlice, define the initial state with userList as an empty array.
// Use the extraReducers property of createSlice to define how the state should be updated in response to different actions.
// In this case, we have a single extra reducer defined for the addNewUser action. When the addNewUser action is fulfilled (successful), the corresponding reducer function is called. It takes the current state and the action as parameters. It appends the newly added user (action.payload) to the userList array in the state.
// The selectAllUsers function is an exported selector function that allows you to retrieve the userList from the Redux store.
// Finally, export the allUsersSlice.reducer, which represents the reducer function generated by createSlice for this slice.
// By using this slice and the defined actions, you can manage the state of all users in your Redux store and perform operations such as adding new users.
