import { createSlice, createAsyncThunk } from "@reduxjs/toolkit";
import axios from "axios";

// Async thunk function to fetch all users from the server
export const fetchAllUsers = createAsyncThunk("allUsers", async () => {
  try {
    const { data } = await axios.get("api/users"); // Make sure that this is the correct endpoint for fetching all users from your server. 
    return data;
  } catch (error) {
    console.log(error);
  }
});

// Creating a slice for managing the state related to all users
const allUsersSlice = createSlice({
  name: "allUsers",
  initialState: {
    userList: [], // Initial state is an empty array for the userList
  },
  extraReducers: (builder) => {
    builder.addCase(fetchAllUsers.fulfilled, (state, action) => {
      state.userList = action.payload; // Update the userList state with the fetched data
    });
  },
});

// Selector function to extract the allUsers state from the Redux store
export const selectAllUsers = (state) => {
  return state.allUsers.userList;
};

export default allUsersSlice.reducer;



// 1. Import necessary dependencies:
// createSlice and createAsyncThunk from @reduxjs/toolkit package: These are functions provided by Redux Toolkit to simplify Redux-related code.
// axios library: Used for making HTTP requests.

// 2. Define an async thunk function fetchAllUsers:
// It is created using the createAsyncThunk function.
// The thunk is responsible for fetching all users from the server.
// Inside the thunk, an HTTP GET request is made to the "api/users" endpoint using axios.get().
// The response data is returned to be used as the payload in the Redux action.
// If an error occurs during the request, it is logged to the console.

// 3. Create a slice using createSlice:
// The slice represents the Redux state and its associated reducers.
// The name option is set to "allUsers".
// The initialState is an object with a userList property initialized as an empty array.

// 4. Configure extra reducers for the fetchAllUsers action:
// The extraReducers field of the slice defines how the state should be updated when certain actions are dispatched.
// Using builder.addCase, we specify that when fetchAllUsers action is fulfilled, the userList state should be updated with the payload received in the action.

// 5. Define the selectAllUsers selector function:
// It takes the state as an argument and returns the userList state from the allUsers slice.

// 6. Export the allUsersSlice.reducer:
// This is the reducer function generated by createSlice and will be used in the Redux store configuration.





